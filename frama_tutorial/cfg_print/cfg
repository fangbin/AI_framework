digraph cfg {
	graph [bb="0,0,2425,1242"];
	node [label="\N"];
	subgraph cluster_warm_boot {
		graph [bb="8,1088,172,1234",
			label=warm_boot,
			lheight=0.19,
			lp="90,1223",
			lwidth=0.89
		];
		s1		 [height=0.5,
			label="printf(\"%s\\n\",str);",
			pos="90,1186",
			width=2.0573];
		s96		 [height=0.5,
			label="<return>",
			pos="90,1114",
			width=1.1444];
		s1 -> s96		 [pos="e,90,1132.1 90,1167.7 90,1160 90,1150.7 90,1142.1"];
	}
	subgraph cluster_laFree {
		graph [bb="180,8,689,1234",
			label=laFree,
			lheight=0.19,
			lp="434.5,1223",
			lwidth=0.49
		];
		s4		 [height=0.5,
			label="f = (HEADER *)ap - 1;",
			pos="434,1186",
			width=2.5955];
		s5		 [height=0.5,
			label="memleft = (short)((unsigned int)memleft + f->size);",
			pos="434,1114",
			width=5.3827];
		s4 -> s5		 [pos="e,434,1132.1 434,1167.7 434,1160 434,1150.7 434,1142.1"];
		s7		 [height=0.5,
			label="if frhd > f",
			pos="434,1042",
			width=1.2446];
		s5 -> s7		 [pos="e,434,1060.1 434,1095.7 434,1088 434,1078.7 434,1070.1"];
		s8		 [height=0.5,
			label="nxt = frhd;",
			pos="373,970",
			width=1.3335];
		s7 -> s8		 [pos="e,387.49,987.63 419.85,1024.8 412.26,1016.1 402.76,1005.1 394.29,995.43"];
		s18		 [height=0.5,
			label="prev = (HEADER *)0;",
			pos="529,970",
			width=2.5137];
		s7 -> s18		 [pos="e,506.43,987.63 454.61,1025.8 467.39,1016.4 484.03,1004.1 498.33,993.6"];
		s9		 [height=0.5,
			label="frhd = f;",
			pos="373,898",
			width=1.1014];
		s8 -> s9		 [pos="e,373,916.1 373,951.7 373,943.98 373,934.71 373,926.11"];
		s19		 [height=0.5,
			label="nxt = frhd;",
			pos="529,898",
			width=1.3335];
		s18 -> s19		 [pos="e,529,916.1 529,951.7 529,943.98 529,934.71 529,926.11"];
		s10		 [height=0.5,
			label="prev = f + f->size;",
			pos="373,826",
			width=2.0741];
		s9 -> s10		 [pos="e,373,844.1 373,879.7 373,871.98 373,862.71 373,854.11"];
		s12		 [height=0.5,
			label="if prev == nxt",
			pos="373,754",
			width=1.6425];
		s10 -> s12		 [pos="e,373,772.1 373,807.7 373,799.98 373,790.71 373,782.11"];
		s13		 [height=0.5,
			label="f->size += nxt->size;",
			pos="399,682",
			width=2.3491];
		s12 -> s13		 [pos="e,392.58,700.28 379.29,736.05 382.22,728.18 385.77,718.62 389.05,709.79"];
		s15		 [height=0.5,
			label="f->ptr = nxt;",
			pos="242,682",
			width=1.4993];
		s12 -> s15		 [pos="e,269.61,697.75 344.9,737.98 325.51,727.63 299.56,713.76 278.56,702.54"];
		s14		 [height=0.5,
			label="f->ptr = nxt->ptr;",
			pos="297,610",
			width=1.9925];
		s13 -> s14		 [pos="e,320.41,627.07 375.09,664.59 361.3,655.13 343.8,643.12 328.86,632.87"];
		s98		 [height=0.5,
			label="<goto>",
			pos="224,538",
			width=0.99455];
		s15 -> s98		 [pos="e,219.34,555.95 231.22,664.08 225.47,654.03 218.97,640.78 216,628 211.24,607.5 213.77,583.75 217.2,565.93"];
		s14 -> s98		 [pos="e,240.18,554.51 279.7,592.41 270.06,583.17 257.93,571.54 247.45,561.49"];
		s100		 [height=0.5,
			label="<return>",
			pos="398,34",
			width=1.1444];
		s98 -> s100		 [pos="e,361.12,42.393 217.09,520.28 206.89,494.06 189,441.46 189,395 189,395 189,395 189,177 189,99.086 289.6,60.933 351.21,44.873"];
		s20		 [height=0.5,
			label="<loop>",
			pos="529,826",
			width=0.99455];
		s19 -> s20		 [pos="e,529,844.1 529,879.7 529,871.98 529,862.71 529,854.11"];
		s22		 [height=0.5,
			label="if nxt",
			pos="563,754",
			width=0.80611];
		s20 -> s22		 [pos="e,555,771.47 537.06,808.41 541.08,800.13 546.04,789.92 550.54,780.66"];
		s24		 [height=0.5,
			label="if nxt < f",
			pos="563,682",
			width=1.1493];
		s22 -> s24		 [pos="e,563,700.1 563,735.7 563,727.98 563,718.71 563,710.11"];
		s26		 [height=0.5,
			label="<break>",
			pos="641,610",
			width=1.1033];
		s22 -> s26		 [pos="e,638.03,628 579.92,738.76 590.73,728.87 604.29,714.84 613,700 624.36,680.64 631.62,656.16 635.9,637.78"];
		s27		 [height=0.5,
			label="<block>",
			pos="447,610",
			width=1.1036];
		s24 -> s27		 [pos="e,470.16,624.97 539.8,667 522.34,656.46 498.19,641.89 478.91,630.25"];
		s25		 [height=0.5,
			label="<break>",
			pos="544,610",
			width=1.1033];
		s24 -> s25		 [pos="e,548.69,628.28 558.4,664.05 556.29,656.26 553.72,646.82 551.35,638.08"];
		s41		 [height=0.5,
			label="prev->ptr = f;",
			pos="606,538",
			width=1.6219];
		s26 -> s41		 [pos="e,614.64,556.28 632.53,592.05 628.5,584.01 623.6,574.2 619.11,565.23"];
		s29		 [height=0.5,
			label="if nxt + nxt->size == f",
			pos="429,538",
			width=2.4653];
		s27 -> s29		 [pos="e,433.44,556.28 442.64,592.05 440.64,584.26 438.21,574.82 435.96,566.08"];
		s25 -> s41		 [pos="e,591.12,555.8 558.07,593.12 565.85,584.33 575.68,573.23 584.42,563.37"];
		s42		 [height=0.5,
			label="prev = f + f->size;",
			pos="606,466",
			width=2.0741];
		s41 -> s42		 [pos="e,606,484.1 606,519.7 606,511.98 606,502.71 606,494.11"];
		s30		 [height=0.5,
			label="nxt->size += f->size;",
			pos="429,466",
			width=2.3491];
		s29 -> s30		 [pos="e,429,484.1 429,519.7 429,511.98 429,502.71 429,494.11"];
		s39		 [height=0.5,
			label="prev = nxt;",
			pos="277,466",
			width=1.3607];
		s29 -> s39		 [pos="e,306.39,480.53 394.89,521.29 371.4,510.47 340.14,496.08 315.72,484.83"];
		s31		 [height=0.5,
			label="f = nxt + nxt->size;",
			pos="429,394",
			width=2.1836];
		s30 -> s31		 [pos="e,429,412.1 429,447.7 429,439.98 429,430.71 429,422.11"];
		s40		 [height=0.5,
			label="nxt = nxt->ptr;",
			pos="270,394",
			width=1.7314];
		s39 -> s40		 [pos="e,271.71,412.1 275.27,447.7 274.5,439.98 273.57,430.71 272.71,422.11"];
		s33		 [height=0.5,
			label="if f == nxt->ptr",
			pos="414,322",
			width=1.781];
		s31 -> s33		 [pos="e,417.67,340.1 425.29,375.7 423.64,367.98 421.65,358.71 419.81,350.11"];
		s34		 [height=0.5,
			label="nxt->size += f->size;",
			pos="414,250",
			width=2.3491];
		s33 -> s34		 [pos="e,414,268.1 414,303.7 414,295.98 414,286.71 414,278.11"];
		s99		 [height=0.5,
			label="<goto>",
			pos="344,106",
			width=0.99455];
		s33 -> s99		 [pos="e,332.81,123.3 371.71,308.25 352.35,300.06 331.25,287.25 320,268 293.99,223.48 307.5,202.02 320,152 321.66,145.35 324.52,138.6 327.69,\
132.43"];
		s35		 [height=0.5,
			label="nxt->ptr = f->ptr;",
			pos="401,178",
			width=1.9925];
		s34 -> s35		 [pos="e,404.18,196.1 410.79,231.7 409.35,223.98 407.63,214.71 406.04,206.11"];
		s99 -> s100		 [pos="e,385.17,51.633 356.52,88.765 363.18,80.143 371.49,69.365 378.93,59.727"];
		s35 -> s99		 [pos="e,356.89,122.83 387.2,160.05 380.07,151.29 371.24,140.45 363.43,130.86"];
		s40 -> s20		 [pos="e,527.22,807.81 248.03,411.03 237.07,420.42 224.92,433.31 219,448 213.02,462.84 210.91,470.2 219,484 231.88,505.97 247.58,498.22 \
269,512 275.32,516.06 373.03,586.36 378,592 390.1,605.73 384.15,616.03 398,628 432.15,657.53 463.42,629.88 493,664 510.14,683.77 \
521.15,757.3 526.05,797.81"];
		s44		 [height=0.5,
			label="if prev == nxt",
			pos="596,250",
			width=1.6425];
		s42 -> s44		 [pos="e,596.81,268.23 605.2,447.85 603.47,410.83 599.37,323.18 597.28,278.39"];
		s45		 [height=0.5,
			label="f->size += nxt->size;",
			pos="596,178",
			width=2.3491];
		s44 -> s45		 [pos="e,596,196.1 596,231.7 596,223.98 596,214.71 596,206.11"];
		s47		 [height=0.5,
			label="f->ptr = nxt;",
			pos="452,106",
			width=1.4993];
		s44 -> s47		 [pos="e,464.06,123.69 560.7,235.55 541.34,226.72 518.08,213.54 502,196 487.48,180.17 492.44,170.78 482,152 478.3,145.34 473.93,138.39 \
469.69,131.99"];
		s46		 [height=0.5,
			label="f->ptr = nxt->ptr;",
			pos="596,106",
			width=1.9925];
		s45 -> s46		 [pos="e,596,124.1 596,159.7 596,151.98 596,142.71 596,134.11"];
		s47 -> s100		 [pos="e,410.71,51.47 439.2,88.411 432.54,79.781 424.28,69.062 416.9,59.497"];
		s46 -> s100		 [pos="e,428.92,45.933 555.93,90.834 521.79,78.763 472.94,61.492 438.63,49.364"];
	}
	subgraph cluster_laAlloc {
		graph [bb="697,152,1543,1234",
			label=laAlloc,
			lheight=0.19,
			lp="1120,1223",
			lwidth=0.57
		];
		s50		 [height=0.5,
			label="nunits = (int)((((unsigned int)nbytes + sizeof(HEADER)) - (unsigned int)1) / sizeof(HEADER) + (unsigned int)1);",
			pos="1120,1186",
			width=11.537];
		s51		 [height=0.5,
			label="prev = (HEADER *)0;",
			pos="1124,1114",
			width=2.5137];
		s50 -> s51		 [pos="e,1123,1132.1 1121,1167.7 1121.4,1160 1122,1150.7 1122.5,1142.1"];
		s52		 [height=0.5,
			label="nxt = frhd;",
			pos="1138,1042",
			width=1.3335];
		s51 -> s52		 [pos="e,1134.6,1060.1 1127.5,1095.7 1129,1088 1130.9,1078.7 1132.6,1070.1"];
		s53		 [height=0.5,
			label="<loop>",
			pos="1145,970",
			width=0.99455];
		s52 -> s53		 [pos="e,1143.3,988.1 1139.7,1023.7 1140.5,1016 1141.4,1006.7 1142.3,998.11"];
		s55		 [height=0.5,
			label="if nxt",
			pos="1145,898",
			width=0.80611];
		s53 -> s55		 [pos="e,1145,916.1 1145,951.7 1145,943.98 1145,934.71 1145,926.11"];
		s57		 [height=0.5,
			label="<block>",
			pos="1148,826",
			width=1.1036];
		s55 -> s57		 [pos="e,1147.3,844.1 1145.7,879.7 1146.1,871.98 1146.5,862.71 1146.8,854.11"];
		s56		 [height=0.5,
			label="<break>",
			pos="957,826",
			width=1.1033];
		s55 -> s56		 [pos="e,986.67,838.05 1120.8,887.99 1089.3,876.26 1033.9,855.62 996.28,841.63"];
		s59		 [height=0.5,
			label="if nxt->size >= (unsigned int)nunits",
			pos="1175,754",
			width=3.7802];
		s57 -> s59		 [pos="e,1168.3,772.28 1154.5,808.05 1157.6,800.18 1161.3,790.62 1164.7,781.79"];
		s75		 [height=0.5,
			label="warm_boot((char *)\"Allocation Failed!\");",
			pos="863,754",
			width=4.3967];
		s56 -> s75		 [pos="e,885.88,772.04 937.07,810.15 924.54,800.83 908.13,788.61 893.94,778.04"];
		s76		 [height=0.5,
			label="__retres = (void *)0;",
			pos="912,394",
			width=2.3089];
		s75 -> s76		 [pos="e,896.1,411.75 863,735.95 863,709.29 863,656.11 863,611 863,611 863,611 863,537 863,497.2 858.49,485.07 873,448 876.94,437.95 883.28,\
428.09 889.72,419.66"];
		s61		 [height=0.5,
			label="if nxt->size > (unsigned int)nunits",
			pos="1064,682",
			width=3.6417];
		s59 -> s61		 [pos="e,1090.8,699.87 1148.4,736.23 1133.7,726.95 1115.2,715.29 1099.3,705.26"];
		s73		 [height=0.5,
			label="prev = nxt;",
			pos="1262,682",
			width=1.3607];
		s59 -> s73		 [pos="e,1242.6,698.59 1196.1,736.05 1207.7,726.69 1222.3,714.96 1234.8,704.91"];
		s62		 [height=0.5,
			label="nxt->size -= (unsigned int)nunits;",
			pos="1024,610",
			width=3.5803];
		s61 -> s62		 [pos="e,1033.8,628.1 1054.1,663.7 1049.5,655.64 1043.9,645.89 1038.8,636.98"];
		s66		 [height=0.5,
			label="if prev == (HEADER *)0",
			pos="1218,538",
			width=2.7954];
		s61 -> s66		 [pos="e,1210.5,556.24 1104.7,664.77 1123.6,655.87 1145.5,643.47 1162,628 1181,610.18 1196.3,584.53 1206,565.34"];
		s74		 [height=0.5,
			label="nxt = nxt->ptr;",
			pos="1277,610",
			width=1.7314];
		s73 -> s74		 [pos="e,1273.3,628.1 1265.7,663.7 1267.4,655.98 1269.3,646.71 1271.2,638.11"];
		s63		 [height=0.5,
			label="nxt += nxt->size;",
			pos="1018,538",
			width=1.979];
		s62 -> s63		 [pos="e,1019.5,556.1 1022.5,591.7 1021.9,583.98 1021.1,574.71 1020.3,566.11"];
		s67		 [height=0.5,
			label="frhd = nxt->ptr;",
			pos="1218,466",
			width=1.8267];
		s66 -> s67		 [pos="e,1218,484.1 1218,519.7 1218,511.98 1218,502.71 1218,494.11"];
		s68		 [height=0.5,
			label="prev->ptr = nxt->ptr;",
			pos="1386,466",
			width=2.3472];
		s66 -> s68		 [pos="e,1349.3,482.3 1255.7,521.29 1280.6,510.92 1313.4,497.25 1339.9,486.23"];
		s64		 [height=0.5,
			label="nxt->size = (unsigned int)nunits;",
			pos="1008,466",
			width=3.4984];
		s63 -> s64		 [pos="e,1010.4,484.1 1015.5,519.7 1014.4,511.98 1013.1,502.71 1011.9,494.11"];
		s69		 [height=0.5,
			label="memleft = (short)((int)memleft - nunits);",
			pos="1193,394",
			width=4.2941];
		s64 -> s69		 [pos="e,1149.8,411.35 1050.4,448.94 1077.2,438.82 1111.9,425.68 1140.4,414.91"];
		s71		 [height=0.5,
			label="__retres = (void *)(nxt + 1);",
			pos="1155,322",
			width=3.0478];
		s69 -> s71		 [pos="e,1164.3,340.1 1183.6,375.7 1179.2,367.64 1173.9,357.89 1169.1,348.98"];
		s67 -> s69		 [pos="e,1199.2,412.28 1211.9,448.05 1209.1,440.18 1205.7,430.62 1202.6,421.79"];
		s68 -> s69		 [pos="e,1237.9,411.29 1345.1,450.15 1316.7,439.87 1278.6,426.06 1247.7,414.84"];
		s102		 [height=0.5,
			label="<goto>",
			pos="1080,250",
			width=0.99455];
		s71 -> s102		 [pos="e,1096.2,266.12 1136.8,304.05 1126.9,294.74 1114.4,283.08 1103.6,273.07"];
		s103		 [height=0.5,
			label="<return>",
			pos="977,178",
			width=1.1444];
		s102 -> s103		 [pos="e,998.37,193.52 1059.7,235.17 1044.6,224.92 1023.8,210.8 1006.8,199.28"];
		s74 -> s53		 [pos="e,1176,960.76 1294.5,627.47 1303.7,637.18 1314.2,650.23 1320,664 1335.4,700.71 1330,713.2 1330,753 1330,827 1330,827 1330,827 1330,\
899.23 1240.2,939.75 1185.7,957.68"];
		s76 -> s103		 [pos="e,971.86,195.94 917.21,375.85 928.5,338.66 955.32,250.37 968.87,205.77"];
	}
	subgraph cluster_laInit {
		graph [bb="1551,728,2249,1234",
			label=laInit,
			lheight=0.19,
			lp="1900,1223",
			lwidth=0.41
		];
		s78		 [height=0.5,
			label="_heapstart.ptr = (struct hdr *)sbrk(0xFF50);",
			pos="1900,1186",
			width=4.5878];
		s79		 [height=0.5,
			label="_heapend.ptr = (struct hdr *)sbrk(0);",
			pos="1900,1114",
			width=3.8778];
		s78 -> s79		 [pos="e,1900,1132.1 1900,1167.7 1900,1160 1900,1150.7 1900,1142.1"];
		s80		 [height=0.5,
			label="frhd = _heapstart.ptr;",
			pos="1900,1042",
			width=2.3634];
		s79 -> s80		 [pos="e,1900,1060.1 1900,1095.7 1900,1088 1900,1078.7 1900,1070.1"];
		s81		 [height=0.5,
			label="frhd->ptr = (struct hdr *)0;",
			pos="1900,970",
			width=2.9181];
		s80 -> s81		 [pos="e,1900,988.1 1900,1023.7 1900,1016 1900,1006.7 1900,998.11"];
		s82		 [height=0.5,
			label="frhd->size = (unsigned int)((char *)_heapend.ptr - (char *)_heapstart.ptr) / sizeof(HEADER);",
			pos="1900,898",
			width=9.4592];
		s81 -> s82		 [pos="e,1900,916.1 1900,951.7 1900,943.98 1900,934.71 1900,926.11"];
		s83		 [height=0.5,
			label="memleft = (short)frhd->size;",
			pos="1900,826",
			width=3.0953];
		s82 -> s83		 [pos="e,1900,844.1 1900,879.7 1900,871.98 1900,862.71 1900,854.11"];
		s105		 [height=0.5,
			label="<return>",
			pos="1900,754",
			width=1.1444];
		s83 -> s105		 [pos="e,1900,772.1 1900,807.7 1900,799.98 1900,790.71 1900,782.11"];
	}
	subgraph cluster_main {
		graph [bb="2257,512,2417,1234",
			label=main,
			lheight=0.19,
			lp="2337,1223",
			lwidth=0.39
		];
		s86		 [height=0.5,
			label="laInit();",
			pos="2337,1186",
			width=1.031];
		s87		 [height=0.5,
			label="man = (void *)0;",
			pos="2337,1114",
			width=1.9407];
		s86 -> s87		 [pos="e,2337,1132.1 2337,1167.7 2337,1160 2337,1150.7 2337,1142.1"];
		s88		 [height=0.5,
			label="p1 = laAlloc(20);",
			pos="2337,1042",
			width=1.9883];
		s87 -> s88		 [pos="e,2337,1060.1 2337,1095.7 2337,1088 2337,1078.7 2337,1070.1"];
		s89		 [height=0.5,
			label="laAlloc(20);",
			pos="2337,970",
			width=1.4813];
		s88 -> s89		 [pos="e,2337,988.1 2337,1023.7 2337,1016 2337,1006.7 2337,998.11"];
		s90		 [height=0.5,
			label="p2 = laAlloc(20);",
			pos="2337,898",
			width=1.9883];
		s89 -> s90		 [pos="e,2337,916.1 2337,951.7 2337,943.98 2337,934.71 2337,926.11"];
		s91		 [height=0.5,
			label="laAlloc(20);",
			pos="2337,826",
			width=1.4813];
		s90 -> s91		 [pos="e,2337,844.1 2337,879.7 2337,871.98 2337,862.71 2337,854.11"];
		s92		 [height=0.5,
			label="laFree(p1);",
			pos="2337,754",
			width=1.372];
		s91 -> s92		 [pos="e,2337,772.1 2337,807.7 2337,799.98 2337,790.71 2337,782.11"];
		s93		 [height=0.5,
			label="laFree(p2);",
			pos="2337,682",
			width=1.372];
		s92 -> s93		 [pos="e,2337,700.1 2337,735.7 2337,727.98 2337,718.71 2337,710.11"];
		s94		 [height=0.5,
			label="__retres = 0;",
			pos="2337,610",
			width=1.5244];
		s93 -> s94		 [pos="e,2337,628.1 2337,663.7 2337,655.98 2337,646.71 2337,638.11"];
		s107		 [height=0.5,
			label="<return>",
			pos="2337,538",
			width=1.1444];
		s94 -> s107		 [pos="e,2337,556.1 2337,591.7 2337,583.98 2337,574.71 2337,566.11"];
	}
}
