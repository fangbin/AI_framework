(* 用于调试lexers的"脚手架",由于OCaml中不支持函数名大写开头,我用v_代
   替了书中例子里的函数名 *)

type linenum = int
type token = string

let v_type i (j:int) = "TYPE   " ^ (string_of_int i)
let v_var i (j:int) = "VAR   " ^ (string_of_int i)
let v_function i (j:int) = "FUNCTION   " ^ (string_of_int i)
let v_break i (j:int) = "BREAK   " ^ (string_of_int i)
let v_of i (j:int) = "OF   " ^ (string_of_int i)
let v_end i (j:int) = "END   " ^ (string_of_int i)
let v_in i (j:int) = "IN   " ^ (string_of_int i)
let v_nil i (j:int) = "NIL   " ^ (string_of_int i)
let v_let i (j:int) = "LET   " ^ (string_of_int i)
let v_do i (j:int) = "DO   " ^ (string_of_int i)
let v_to i (j:int) = "TO   " ^ (string_of_int i)
let v_for i (j:int) = "FOR   " ^ (string_of_int i)
let v_while i (j:int) = "WHILE   " ^ (string_of_int i)
let v_else i (j:int) = "ELSE   " ^ (string_of_int i)
let v_then i (j:int) = "THEN   " ^ (string_of_int i)
let v_if i (j:int) = "IF   " ^ (string_of_int i)
let v_array i (j:int) = "ARRAY   " ^ (string_of_int i)
let v_assign i (j:int) = "ASSIGN   " ^ (string_of_int i)
let v_or i (j:int) = "OR   " ^ (string_of_int i)
let v_and i (j:int) = "AND   " ^ (string_of_int i)
let v_ge i (j:int) = "GE   " ^ (string_of_int i)
let v_gt i (j:int) = "GT   " ^ (string_of_int i)
let v_le i (j:int) = "LE   " ^ (string_of_int i)
let v_lt i (j:int) = "LT   " ^ (string_of_int i)
let v_neq i (j:int) = "NEQ   " ^ (string_of_int i)
let v_eq i (j:int) = "EQ   " ^ (string_of_int i)
let v_divide i (j:int) = "DIVIDE   " ^ (string_of_int i)
let v_times i (j:int) = "TIMES   " ^ (string_of_int i)
let v_minus i (j:int) = "MINUS   " ^ (string_of_int i)
let v_plus i (j:int) = "PLUS   " ^ (string_of_int i)
let v_dot i (j:int) = "DOT   " ^ (string_of_int i)
let v_rbrace i (j:int) = "RBRACE   " ^ (string_of_int i)
let v_lbrace i (j:int) = "LBRACE   " ^ (string_of_int i)
let v_rbrack i (j:int) = "RBRACK   " ^ (string_of_int i)
let v_lbrack i (j:int) = "LBRACK   " ^ (string_of_int i)
let v_rparen i (j:int) = "RPAREN   " ^ (string_of_int i)
let v_lparen i (j:int) = "LPAREN   " ^ (string_of_int i)
let v_semicolon i (j:int) = "SEMICOLON   " ^ (string_of_int i)
let v_colon i (j:int) = "COLON   " ^ (string_of_int i)
let v_comma i (j:int) = "COMMA   " ^ (string_of_int i)
let v_string s i (j:int) = "STRING("^s^")     " ^ (string_of_int i)
let v_int c i (j:int) = "INT("^(string_of_int c)^")   " ^ (string_of_int i)
let v_id s i (j:int) = "ID("^s^")     " ^ (string_of_int i)
let v_eof i (j:int) = "EOF   " ^ (string_of_int i)
